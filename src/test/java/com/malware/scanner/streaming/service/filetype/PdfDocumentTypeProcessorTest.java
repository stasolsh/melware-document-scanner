package com.malware.scanner.streaming.service.filetype;

import com.malware.scanner.streaming.ApplicationTestConfiguration;
import com.malware.scanner.streaming.model.CheckEvent;
import com.malware.scanner.streaming.model.CheckResultEvent;
import com.malware.scanner.streaming.model.FileType;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.nio.file.Paths;

import static com.malware.scanner.streaming.model.CheckResultEvent.StateEnum.*;
import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

@ExtendWith(SpringExtension.class)
@ContextConfiguration(classes = ApplicationTestConfiguration.class)
@ActiveProfiles("test")
public class PdfDocumentTypeProcessorTest {

    public static final String IBAN_CHECK = "IBAN_CHECK";
    public static final String INVALID_FILE_NAME = "/TestData.pdf";

    private static final String TEST_DATA_WITH_SUSPICIOUS_PDF = "/TestDataWithSuspicious.pdf";
    private static final String TEST_DATA_WITHOUT_SUSPICIOUS_PDF = "/TestDataWithoutSuspicious.pdf";

    @Autowired
    private DocumentTypeProcessor pdfDocumentTypeProcessor;

    @Test
    @DirtiesContext
    @Sql("/test-data-ibans.sql")
    public void shouldContainSuspiciousStatus() {

        CheckResultEvent checkResultEvent = pdfDocumentTypeProcessor.verify(getCheckEvent(TEST_DATA_WITH_SUSPICIOUS_PDF), IBAN_CHECK);

        assertEquals(SUSPICIOUS, checkResultEvent.getState());
        assertEquals(IBAN_CHECK, checkResultEvent.getName());
        assertThat(checkResultEvent.getDetails()).contains("There are blacklisted IBAN's: ");
    }

    @Test
    @DirtiesContext
    public void shouldContainOkStatus() {

        CheckResultEvent checkResultEvent = pdfDocumentTypeProcessor.verify(getCheckEvent(TEST_DATA_WITHOUT_SUSPICIOUS_PDF), IBAN_CHECK);

        assertEquals(OK, checkResultEvent.getState());
        assertEquals(IBAN_CHECK, checkResultEvent.getName());
        assertThat(checkResultEvent.getDetails()).contains("There are not blacklisted IBAN's.");
    }

    @Test
    @DirtiesContext
    public void shouldContainErrorStatus() {

        CheckResultEvent checkResultEvent = pdfDocumentTypeProcessor.verify(getCheckEvent(INVALID_FILE_NAME), IBAN_CHECK);

        assertEquals(ERROR, checkResultEvent.getState());
        assertEquals(IBAN_CHECK, checkResultEvent.getName());
        assertThat(checkResultEvent.getDetails()).contains("java.io.FileNotFoundException:");
    }


    private static CheckEvent getCheckEvent(String fileName) {
        return new CheckEvent()
                .setFileType(FileType.PDF)
                .setUrl(Paths.get("src", "test", "resources").toUri() + fileName);
    }
}
